/*
 *
 * Copyright 2022 Camille "DrasLorus" Moni√®re.
 *
 * This file is part of CORDIC_Rotate_APFX.
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along with this program.
 * If not, see <https://www.gnu.org/licenses/>.
 *
 */

#include "CCordicRotateRom/CCordicRotateRom_@ROM_TYPE@_@CORDIC_W@_@CORDIC_STAGES@_@CORDIC_Q@_@CORDIC_DIVIDER@.hpp"
#include <fstream>
#include <iostream>

#include <catch2/catch.hpp>

using namespace std;

using Catch::Matchers::Floating::WithinAbsMatcher;


typedef CCordicRotateRom<4, @ROM_TYPE@, @CORDIC_W@, @CORDIC_STAGES@, @CORDIC_Q@, @CORDIC_DIVIDER@> cordic_rom;

TEST_CASE("ROM-based Cordic (TPL @ROM_TYPE@, @CORDIC_W@, @CORDIC_STAGES@, @CORDIC_Q@, @CORDIC_DIVIDER@) works with C-Types", "[CORDIC]") {
    SECTION("W:@CORDIC_W@ - I:4 - Stages:@CORDIC_STAGES@ - q:@CORDIC_Q@ - div:@CORDIC_DIVIDER@") {
        static constexpr cordic_rom cordic {};

        string input_fn  = "../data/input.dat"; 

        constexpr unsigned n_lines = 100000;

        complex<double> values_in[n_lines];
        complex<double> values_out[n_lines];

        complex<double> results[n_lines];

        ifstream INPUT(input_fn);

        // Init test vector
        for (unsigned i = 0; i < n_lines; i++) {
            double a, b, r;
            INPUT >> a >> b >> r;

            const complex<double> c {a, b};
            values_in[i] = c;

            constexpr double rotation = cordic_rom::rotation;
            constexpr double q        = cordic_rom::q;

            const complex<double> e = exp(complex<double>(0., rotation / q * (i & 255)));
            results[i]              = c * e;
        }

        INPUT.close();

        constexpr double abs_margin = double(1 << cordic.Out_I) * 2. / 100.;

        // Executing the CORDIC
        for (unsigned iter = 0; iter < n_lines; iter++) {
            // Execute

            values_out[iter] = cordic_rom::cordic(values_in[iter], (iter & 255));

            REQUIRE_THAT(values_out[iter].real(), WithinAbsMatcher(results[iter].real(), abs_margin));
            REQUIRE_THAT(values_out[iter].imag(), WithinAbsMatcher(results[iter].imag(), abs_margin));
        }
    }
}

TEST_CASE("ROM-based Cordic (TPL @ROM_TYPE@, @CORDIC_W@, @CORDIC_STAGES@, @CORDIC_Q@, @CORDIC_DIVIDER@) works with AP-Types", "[CORDIC]") {
    constexpr unsigned n_lines = 100000;

    SECTION("W:@CORDIC_W@ - I:4 - Stages:@CORDIC_STAGES@ - q:@CORDIC_Q@ - div:@CORDIC_DIVIDER@") {

        static constexpr cordic_rom cordic {};

        string input_fn = "../data/input.dat";

        constexpr double   rotation = cordic_rom::rotation;
        constexpr double   q        = cordic_rom::q;
        constexpr uint64_t cnt_mask = 0xFF; // Value dependant of the way the ROM is initialized

        constexpr unsigned Out_W = cordic_rom::Out_W;
        constexpr unsigned In_W  = cordic_rom::In_W;

        ap_int<In_W>  values_re_in[n_lines];
        ap_int<In_W>  values_im_in[n_lines];
        ap_int<Out_W> values_re_out[n_lines];
        ap_int<Out_W> values_im_out[n_lines];

        double results_re[n_lines];
        double results_im[n_lines];

        ifstream INPUT(input_fn);

        // Init test vector
        for (unsigned i = 0; i < n_lines; i++) {
            double a, b, r;
            INPUT >> a >> b >> r;

            const complex<double> c {a, b};
            values_re_in[i] = int64_t(a * double(cordic_rom::in_scale_factor));
            values_im_in[i] = int64_t(b * double(cordic_rom::in_scale_factor));

            const complex<double> e = c * exp(complex<double>(0., rotation / q * (i & cnt_mask)));
            results_re[i]           = e.real();
            results_im[i]           = e.imag();
        }

        INPUT.close();

        constexpr double abs_margin = double(1 << cordic.Out_I) * 2. / 100.;

        // Executing the CORDIC
        for (unsigned iter = 0; iter < n_lines; iter++) {
            // Execute
            const uint8_t counter = uint8_t(iter & cnt_mask);

            cordic_rom::cordic(
                values_re_in[iter], values_im_in[iter],
                counter,
                values_re_out[iter], values_im_out[iter]);

            REQUIRE_THAT(values_re_out[iter].to_double() * 5. / 8. / cordic_rom::out_scale_factor, WithinAbsMatcher(results_re[iter], abs_margin));
            REQUIRE_THAT(values_im_out[iter].to_double() * 5. / 8. / cordic_rom::out_scale_factor, WithinAbsMatcher(results_im[iter], abs_margin));
        }
    }

    SECTION("W:@CORDIC_W@ - I:4 - Stages:@CORDIC_STAGES@ - q:@CORDIC_Q@ - div:@CORDIC_DIVIDER@ - internal scaling") {
        static constexpr cordic_rom cordic {};

        string input_fn = "../data/input.dat";

        constexpr double   rotation = cordic_rom::rotation;
        constexpr double   q        = cordic_rom::q;
        constexpr uint64_t cnt_mask = 0xFF; // Value dependant of the way the ROM is initialized

        constexpr unsigned Out_W = cordic_rom::Out_W;
        constexpr unsigned In_W  = cordic_rom::In_W;

        ap_int<In_W>  values_re_in[n_lines];
        ap_int<In_W>  values_im_in[n_lines];
        ap_int<Out_W> values_re_out[n_lines];
        ap_int<Out_W> values_im_out[n_lines];

        double results_re[n_lines];
        double results_im[n_lines];

        ifstream INPUT(input_fn);

        // Init test vector
        for (unsigned i = 0; i < n_lines; i++) {
            double a, b, r;
            INPUT >> a >> b >> r;

            const complex<double> c {a, b};
            values_re_in[i] = int64_t(a * double(cordic_rom::in_scale_factor));
            values_im_in[i] = int64_t(b * double(cordic_rom::in_scale_factor));

            const complex<double> e = c * exp(complex<double>(0., rotation / q * (i & cnt_mask)));
            results_re[i]           = e.real();
            results_im[i]           = e.imag();
        }

        INPUT.close();

        constexpr double abs_margin = double(1 << cordic.Out_I) * 2. / 100.;

        // Executing the CORDIC
        for (unsigned iter = 0; iter < n_lines; iter++) {
            // Execute
            const uint8_t counter = uint8_t(iter & cnt_mask);

            cordic_rom::cordic(
                values_re_in[iter], values_im_in[iter],
                counter,
                values_re_out[iter], values_im_out[iter]);

            REQUIRE_THAT(cordic_rom::scale_cordic(values_re_out[iter]).to_double() / cordic_rom::out_scale_factor,
                         WithinAbsMatcher(results_re[iter],
                                          abs_margin));
            REQUIRE_THAT(cordic_rom::scale_cordic(values_im_out[iter]).to_double() / cordic_rom::out_scale_factor,
                         WithinAbsMatcher(results_im[iter],
                                          abs_margin));
        }
    }
}

TEST_CASE("ROM-based Cordic (TPL @ROM_TYPE@, @CORDIC_W@, @CORDIC_STAGES@, @CORDIC_Q@, @CORDIC_DIVIDER@) constexpr are evaluated during compilation.", "[CORDIC]") {
    SECTION("W:@CORDIC_W@ - I:4 - Stages:@CORDIC_STAGES@ - q:@CORDIC_Q@ - div:@CORDIC_DIVIDER@ - C-Types") {

        constexpr complex<int64_t> value_in = (1U << 12) * 97;
        constexpr uint8_t          angle    = 169;

        constexpr complex<int64_t> res1 = cordic_rom::cordic(value_in, angle);
        constexpr complex<int64_t> res2 = cordic_rom::cordic(value_in, angle);
        static_assert(res1 == res2, "Test");
        REQUIRE_FALSE(res1 == cordic_rom::cordic(complex<int64_t>(1, 0), angle));
        REQUIRE(res1 == cordic_rom::cordic(value_in, angle));
    }
}
